#!/usr/bin/env node

// Script para verificar e migrar base de dados
import { Pool } from 'pg';

async function checkDatabase() {
  console.log('üîç Verificando configura√ß√£o da base de dados...\n');
  
  // Verificar vari√°veis de ambiente
  const dbUrl = process.env.DATABASE_URL;
  if (!dbUrl) {
    console.log('‚ùå DATABASE_URL n√£o est√° configurada');
    console.log('üí° Configure a vari√°vel DATABASE_URL nas configura√ß√µes do Replit');
    return;
  }
  
  console.log('‚úÖ DATABASE_URL encontrada');
  
  // Verificar tipo de base de dados
  if (dbUrl.includes('neon.tech')) {
    console.log('üü¢ Neon Database (externa - nunca hiberna) ‚úÖ');
  } else if (dbUrl.includes('supabase')) {
    console.log('üü¢ Supabase (externa - nunca hiberna) ‚úÖ');
  } else {
    console.log('üîµ Base de dados personalizada detectada');
  }
  
  // Testar conex√£o
  console.log('\nüîå Testando conex√£o...');
  const pool = new Pool({ connectionString: dbUrl });
  
  try {
    const client = await pool.connect();
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    // Verificar vers√£o PostgreSQL
    const versionResult = await client.query('SELECT version()');
    console.log('üìä PostgreSQL:', versionResult.rows[0].version.split(' ')[1]);
    
    // Verificar tabelas existentes
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\nüìã Tabelas encontradas:');
    if (tablesResult.rows.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma tabela encontrada');
      console.log('üîß Execute: npm run db:push');
    } else {
      tablesResult.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.table_name}`);
      });
    }
    
    // Verificar dados de exemplo
    try {
      const userCount = await client.query('SELECT COUNT(*) FROM users');
      const companyCount = await client.query('SELECT COUNT(*) FROM companies');
      const projectCount = await client.query('SELECT COUNT(*) FROM projects');
      
      console.log('\nüìà Estat√≠sticas dos dados:');
      console.log(`   Usu√°rios: ${userCount.rows[0].count}`);
      console.log(`   Empresas: ${companyCount.rows[0].count}`);
      console.log(`   Projetos: ${projectCount.rows[0].count}`);
      
      if (parseInt(userCount.rows[0].count) === 0) {
        console.log('\nüí° Base de dados vazia. Execute: npm run db:seed');
      } else {
        console.log('\n‚úÖ Base de dados externa operacional e populada!');
      }
    } catch (error) {
      console.log('\n‚ö†Ô∏è  Algumas tabelas podem estar em falta');
      console.log('üîß Execute: npm run db:push && npm run db:seed');
    }
    
    client.release();
    
  } catch (error) {
    console.log('‚ùå Erro na conex√£o:', error.message);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('   1. Verificar se a URL est√° correta');
    console.log('   2. Confirmar que a base de dados est√° ativa');
    console.log('   3. Verificar credenciais de acesso');
  } finally {
    await pool.end();
  }
}

// Executar verifica√ß√£o
checkDatabase().catch(console.error);